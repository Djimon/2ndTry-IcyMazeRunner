Version 1.3.B014
°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
				Versionsänderungen:
/*
1.y  = Update y
y.B00x = Beta Build 00x
y.00x  = komplett lauffähige Version 00x
*/

	- beantwortete Fragen: HealSkill auf x Prozent Health, Selbstrettung sorgt für x Prozent Health, States+StateHandler auch für Gegner, Fertigkeiten
	  sind später spezialisierbar(andere Datei dafür einrichten), Fertigkeiten/Angreifen/Blocken können während der Bewegung eingesetzt werden, 
	  Blocken und Angreifen aber nicht gleichzeitig.
	- ToDo: Skill für Aktivierung geheimer Wege einbauen, Skill für Selbstrettung einbauen, 
	  Wenn Todesanimation einmal gestartet ist, muss Heil-Skill deaktiviert werden und nur noch Selbstrettung möglich sein (viele Booleans oder 
	  bzw. alle Skills gesperrt sein außer diesem, 1 Boolean), Loch im Boden fixen, Levelübergang fixen



TODO::::::::::: I_level zu game.I_level machen und überlegen, wie man Rüstungs und Waffenboni in neue Level trotz Gamestate-Wechsel übernehmen kann...
	  

Version 1.3.B015 (Kilian):
	- Calculator-Methoden static gesetzt, Instanzen des Calculators gelöscht. Methoden-Aufruf jetzt einfach über Calculator.Methode();
	- ToDos eingefügt
	- Null-References und StackOverflow-Exceptions behandelt
	- Kommentare und Code-cleaning: Entfernen ungebrauchten Codes, Formatieren und Standardisieren des benötigten Codes
	- abgeschlossen in: Blocks, Maps, Playerstate, PlayerStateHandler, Coordinates, Moveable_Wall, Player, inGame, MovableWallHandler, 
	  Enemy(keine speziellen Kommentare), GameObjectHandler, GameObject, Program, Game, AbstractGame, EntityHandler, Entity, GameTime
	- nicht benötigt in: Controls, Credits, GameWon, GameOver, GameStates
	- @ Chris: Summaries in Global Variables und GUI-Klassen schreiben

Version 1.3.B013d (Kilian):
	- Kommentare und Code-cleaning: Entfernen ungebrauchten Codes, Formatieren und Standardisieren des benötigten Codes
	- abgeschlossen in: Blocks, Maps, Playerstate, PlayerStateHandler, Coordinates, Moveable_Wall, Player, inGame, MovableWallHandler, 
	  Enemy(keine speziellen Kommentare), GameObjectHandler, GameObject, Program
	- angefangen in: 

Version 1.3.B014 (Chris):
	- einige kleine Pseudocode-/Code-Muster für GUI, Skills, Controller, Cutscenes in textform wird später in echte klassen formatiert, sobald ich an einem richtigen PC sitze
	- aktualisierung des Wikis und neue Seiten (level-progression, multithreading, achievements, credity, playtest)

Version 1.3.B013c (Kilian):
	- Kommentare und Code-cleaning: Entfernen ungebrauchten Codes, Formatieren und Standardisieren des benötigten Codes
	- abgeschlossen in: Blocks, Maps, Playerstate, PlayerStateHandler, Coordinates, Moveable_Wall, Player, inGame

Version 1.3.B013b (Kilian):
	- Kommentare und Code-cleaning: Entfernen ungebrauchten Codes, Formatieren und Standardisieren des benötigten Codes
	- abgeschlossen in: Blocks, Maps, Playerstate, PlayerStateHandler, Coordinates, Moveable_Wall
	- angefangen in: Player, inGame

Version 1.3.B013 (Kilian):
	- Timer für Sterbeanimation wird zurückgesetzt, wenn sie beendet ist
	- Level wird nur erniedrigt, wenn Spieler durch Loch im Boden fällt
	- Selbstrettung implementiert
	- Kommentare eingefügt
	- PlayerStates und PlayerStateHandler implementiert und in Player eingefügt
	- Player.SetDamage() implementiert, um Gesundheit des Spielers Schaden zufügen zu können - wenn kleiner 0, wird es 
	  anschließend automatisch auf 0 gesetzt
	- Player.SetHeal() implementiert, um Spieler heilen zu können. Wenn int-Wert übergeben wird, werden die HealthPoints um diesen Wert erhöht
	  bzw. maximal bis zu den maxHealthPoints, ohne Wert wird er auf 100% gehealt. Die sind aber noch nicht die Skills zum Healen, sondern die
	  Methoden, auf die die Skills zugreifen.

	  

Version 1.3.B012 (Kilian):
	- Coordinates.cs erstellt; speichert x und y-Koordinaten und einen Hilfs-Booleans für geheime Wege
	- geheime Wege implementiert (Änderungen in inGame.loadContent[zum Speichern der Blöcke, die veränderbar sind],
	  inGame.update()[am Ende der Methode; zum Wechsel der Texturen], 2 neue Strings und switch-cases in map.cs, 2 neue Blocktypen in Blocks.cs,
	  Setter für Blocks-Texture in Blocks.cs)
	- if-Abfrage zum Auslösen der Todesanimation von ==0 auf <=0 verändert

Version 1.3.B011 (Chris):
	- Kompass gefixed
	- Map: getType() hinzugefügt
	- Zielerfassung in der inGame
	- Testenemy hinzgefügt
	- KI-Testmap 1 hinzugefügt

Version 1.3.B010 (Kilian):
	- Moveable_Wall.cs: komplett kommentiert
	- Moveable_Wall.cs: Animation für Bewegung nach oben und unten fertig gestellt
	- Moveable_Wall.cs: Wall_Collision angepasst
	- Moveable_Wall.cs: Verbindungen mit den Handlern angepasst
	- Calculator.cs: addX() und addY() zum Addieren/Subtrahieren von Skalaren zu einem der beiden Komponenten eines 2D-Vektors eingefügt
	- InGame.cs: Handler integriert

Version 1.3.B009 (Chris):
	- Kompass umgeschrieben (LoadingException????)
	- calculator erweitert um Winkel


Version 1.3.B008 (Kilian):
	- Moveable_Wall.cs: Attributsnamen an GameObject angepasst
	- Moveable_Wall.cs: Wall_Collision eingebaut
	- Moveable_Wall.cs: Update() eingefügt
	- Moveable_Wall.cs: move() an Rechnergeschwindigkeit angepasst
	- Moveable_Wall.cs: Rundungsfehler durch Festsetzen der Position am Ende der Bewegung vorgebeugt
	- Moveable_Wall.cs und MoveableWallHandler.cs direkt von GameObject.cs und GameObjectHandler.cs ableitend --> Änderungen bei
	  EntityHandler und GameObjectHandler
	- MoveableWallHandler.cs: Allgemeine Methodenanpassungen und -erweiterungen

Version 1.3.B008 (Kilian):
	- Kollision mit Levelziel eingefügt
	- Moveable_Wall und damit zusammenhängende Klassen fortgesetzt
	- Calculator.cs eingerichtet, im Moment nur zur Berechnung des Abstands zweier Vektoren. Weitere Methoden, die von Math.* nicht
	  abgedeckt werden, können folgen

Version 1.3.B007b (Kilian):
	- Movable Wall Konstruktur korrigiert --> den abhängigen WallTrigger als Klassenvariable angelegt
	- Movable Wall Beispiel in Ingame.initialize als Kommentar eingefügt

Version 1.3.B007 (Kilian):
	- GameObject.cs und GameObjectHandler.cs implementiert
	- InGame B_isMenuOpen entfernt, da überflüssig
	- Klassen Entity, EntityHandler hinzugefügt
	- EntityHandler.cs implementiert


Version 1.3.B006 (Chris):
	- Loch im Boden für Collision-test in 1. map eingebaut
	- Kompass initialisiert (auskommetniert, da unbekannte Exception)
	- GUI an unser system angepasst


Version 1.3.B005 (Kilian):
	- Movable_Wall bearbeitet (Funktionsweise in Kommentaren ausgefüllt)
	- Versionsnummern angepasst von 1.2.1.B00x auf 1.3.B00x

Version 1.3.B004 (Kilian):
	- Movable_Wall eingebaut

Version 1.3.B003 (Chris):
	- EnemyClass implementiert 
	(zum testen in der InGame: Enemy name = new Enemy(Position, Texturpfad);) 

Version 1.3.B002 (Chris/Ron):
	- SaveLevel aufruf implementiert, aber SaveData.txt wird nicht erstellt???

Version 1.3.B001 (Ron):
	- Neue Klasse unter Gamestates und Gamestruktur
	- Save Level stellt encode(int) und decode [return int] zur Verfügung (speichert verschlüsselt in SaveData.txt)

Version 1.2.1 (Chris):
	- Verrutschter Screen gefixed 
	- Namensvorschläge bitte in den Ideenpool (wiki)

Version 1.2.0 (Kilian):
	- passende Map eingefügt
	- Bekannte Probleme: Verrutschter Screen von Hauptmenü und Steuerung nach Aufruf durch InGameMenü

Version 1.2.B021 (Chris):
	- Loch-Textur eingefügt und platzhaltercode ersetzt

Version 1.2.B020a (Chris):
	- vorbereitung GUI - Kompass-Klasse ungetestet (Wegfindung)
        

Version 1.2.B019 (Chris):
	- InGameMenü final gefixt. 
	  -
	  
	  
	  
	  : MainMenü-Aufruf - View korrigieren

Version 1.2.B018b (Kilian):
	- Fix InGamemenu (switch-case in der Draw wieder eingefügt)
	- Null-reference bei Controls-Sprite entfernt
	- Null-reference bei Ingame.update(): menu.update() entfernt

Version 1.2.B018 (Kilian):
	- Fix InGamemenu

Version 1.2.B017 (Chris):
	- InGameMenü pausiert nun das Spiel, immer noch nicht benutzbar

Version 1.2.B016 (Chris):
	- codeConventions eingeführt in allen Klassenumgesetzt
	- InGameMenü in externem testordner zu EGamestate verändert -> sobald es läuft auch hier

Version 1.2.B015 (Kilian):
	- folgende Klassen auskommentiert: Map.cs, Blocks.cs, Player.cs


Version 1.2.B014 (Kilian):
	- MainMenu Code überarbeitet, if-Abfragen verschlankt, höhere Übersichtlichkeit des Codes
	- InGameMenu if-Abfragen für select durch switch-case ersetzt (leichte Verringerung des Rechneraufwandes)
	- Controls.cs unnötige if-Abfrage entfernt
	- folgende Klassen auskommentiert: credits.cs, controls.cs, MainMenu.cs, InGameMenu.cs, NextLevel.cs, Program.cs (nichts geändert)


Version 1.2.B013 (Kilian):
	- Map_Level2 eingefügt
	- InGame-Menüausführung gefixed (InGameMenu.update() hat zwar EGameStates returnt, aber das Ergebnis des Methodenaufrufs wurde nicht in
	  InGame returnt, wo die eigentliche Aktualisierung der GameStates stattfindet)
	- neue Klasse: NextLevel erstellt
	- neue Textdatei: Übersicht fehlender Texturen/Animationen
	- externe Tabelle in den Ordnern zum Speichern levelabhängiger Variablen in einer Übersicht erstellt


Version 1.2.A012 (Chris):
	- GlobalVariables (für Fenstergröße) initialisiert


Version 1.2.B011 (Chris):
	- Fog-of-war glitch entfernt
	- IngameMenu skaliert


Version 1.2.B009c (Kilian):
	- ingamemenu select gefixed


Version 1.2.B009b (Kilian):
	- Ingamemenü wird aktualisiert


Version 1.2.B009 (Chris):
	- Menügrafik skalliert
	- für variable "select" ein Console-output hinzugefügt, für Menü-Tests


Version 1.2.B008 (Kilian):
	- Aufruf des IngameMenüs in Ingame eingefügt
	- Schließen des Menüs möglich


Version 1.2.B007 (Chris):
	- InGame Menu überarbeitet, Grafiken hinzugefügt


Version 1.2.B006 (Kilian):
	- InGame Menu bearbeitet, so gut wie fertig


Version 1.2.B005 (Kilian):
	- Map-Bitmap Tutorial mit horizontalen Walltexturen überarbeiten


Version 1.2.B004e (Kilian):
	- level ist jetzt static
	- Patchnotes durchgearbeitet


Version 1.2.B004d (Kilian):
	- Kollision mit Loch im Boden gefixed


Version 1.2.B004c (Kilian):
	- Teilkorrektur an Kollision mit Loch im Boden


Version 1.2.B004b (Kilian):
	- Fallanimation gefixed (Textur änderte sich nur alle 500 Millisekunden statt bei jedem Durchlauf)


Version 1.2.B004 (Kilian):
	- Loch-im-Boden-Block erstellt
	- Loch-im-Boden in Map hinzugefügt
	- HP für Spieler erstellt
	- Kollision mit Loch erstellt, noch Fehlermeldung vorhanden
	- Fallanimation (Platzhalter) eingefügt
	- Level wird anschließend um 1 gesenkt
	- GameOver eingefügt
	- ToDos aktualisiert


Version 1.2.B003 (Kilian):
	- InGameMenu begonnen(Platzhaltertexturen und Sprites erstellt)
	- Platzhaltertexturen für Fallanimation geladen


Version 1.2.B002 (Kilian):
	- Getter und Setter für Blocksize
	- neues Integer für Todesstatus und Todesart
	- Getter und Setter für dieses Integer
	- Integer initialisiert


Version 1.2.B001 (Kilian):
	- Sommerthema aus den Einstellungen entfernt


Version 1.1.004a (Chris):
	- kleiner Vorschlag für schönere Optik der Mauerteile


Version 1.1.004 (Kilian):
	- Gamestate GameOver implementiert


Version 1.1.003 (Chris):
	- Implementierung collision (InGame)
	- Grundidee Zielkollision in der InGame, ausgeklammert, weil nicht weitergekommen
	- Fog_of_War.png gefixed und versetzt
	- Formatierung der Patchnotes


Version 1.1.002 (Kilian):
	- ToDo-Liste und Patchnotes wurden angelegt.
	- Die Fokusierung des Fensters auf den Spieler 	verursachte Probleme bei dem Wechsel in andere 	Spielzustände wie Gewonnen oder Menü. Dies wurde nun behoben.


Version 1.1.001(Chris):
	- Das Ziel hat nun eine Treppentextur.
	- Hintergrundmusik wurde implementiert.


°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°

Zeitplan:

https://github.com/Djimon/2ndTry-IcyMazeRunner/wiki/Zeitplan-f%C3%BCr-neue-Spielkomponenten--funktionen--strukturen-und-%C3%84nderungen

°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
				erledigte To-DO's:


	- Abdunklungstextur etwas vergrößern(und Position nicht ganz bei 0,0, sondern etwas im Negativbereich), bei Richtungsswechsel sind an den Rändern wieder die die Oberflächen zu sehen.
	- Kollision mit Loch fixen
	- Player.update() anpassen, sodass bei Spielerleben == 0 GameOver-GameState returned wird
	- Map-Bitmaps mit horizontalen Walltexturen überarbeiten
	- Löcher im Boden
	- Textur vom Fog of War leicht vergrößern (außen, nicht der Kreis). Bei Richtungswechsel sieht man meist am Rand wieder das Labyrinth 
	- GameState nächstes Level
	- Platzhalter für InGameMenü ersetzen 
	- levelabhängige Attribute (Position, Map) besser strukturieren, anzeigen und Übersicht erstellen
	- Platzhalter für die Löcher im Boden ersetzen
	- Ingame-Menu


°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
					To-Do:


Wichtiges/Fixes:

	- Platzhalter für Fallanimation ersetzen
	- neue Maps
	- Anpassung der Seitenaufrufe vom InGameMenü aus (Screens sind verschoben)
	- NextLevel-Screen erstellen und Einfügen
	- Textdatei für einheitliche Bezeichnung wiederholender Dateien (Mapnamen, Animationen u.Ä.)
	- Fragen klären: Map.cs(2-4), Blocks.cs(1), InGameMenu.cs(3), Player.cs(2 [Getter&Setter])
	- vorhandenen Trap-Klassen-Code importieren (Kilian)

Diskussionsthemen:
	- Soll es möglich sein, dass man, während die Sterbeanimation noch läuft (5 Sekunden oder so), sein Leben wieder auf über 0 erhöhen kann (mit Heiltrank o.Ä.) 
	  und damit den Tod noch abwenden kann? GameTime DeathWatch wird dann gestoppt und resetted. (ansonsten läuft es so ab: Leben=0--> Deathwatch startet und 
	  Sterbeanimation beginnt, Sterbeanimation endet zeitgleich überschreitet Deathwatch eine bestimmte Zeit und dann wird GameOver-GameState returned) [--> rewind?]
	- Patchnotes-Zusammenfassung von Menü aus zugreifbar? Scrollbare Dialogbox
	- Item, das die Teile der Map abspeichert, durch die man gelaufen ist und sich am Ende des Levels selbst zerstört. Map muss in jedem Level gefunden werden?
	- Fallanimation für alle 4 Richtungen?

Features:
	- Fallen:
		- Falle als Abstrakte Klasse anlegen (fertig)
		- move, Kollision, Schaden als Methoden (fertig)
		- verschiedene Typen von Fallen als Unterklassen anlegen (Pfeile, Dornen im Boden, Feuer und Ähnliches) (teilweise fertig):
			- Arrowtrap: Pfeile fliegen in Richtung des Auslösers/Spielers (sofort tödlich)
			- Thorntrap: Dornen ragen aus dem Boden, bleiben an ihrer Position, machen einmal Schaden (nicht tödlich)
			- rollende Baumstämme: ähnlich den Pfeilen, jedoch maximale Reichweite inbegriffen (Pfeile fliegen bis zur nächsten Wand) (nicht 
			- Flammenwerfer, der den Durchgang für eine bestimmte Zeit blockiert, ähnlich wie die Dornen 
			  (eventuell einer von ihnen direkt tödlich, der andere erst nach mehrmaligen Drüberlaufen bzw. mehreren Sekunden innerhalb des
			   Schadensbereiches. Also Geduldsfrage. Problem entsteht, wenn man von Gegnern dabei verfolgt wird und entweder durchlaufen muss
			   oder sich den Gegnern stellen muss)
			- Schlingfalle: Spieler kann sich nicht bewegen, aber verteidigen/angreifen (macht erst mit Gegnern Sinn)
			- Stolperfalle: wie Schlingfalle, aber Spieler ist betäubt--> kann sich nicht verteidigen oder blocken.
			- Falle löst Überflutung eines Teilgebietes aus, um Gang wieder passierbar zu machen,
			  muss man einen sichtbaren Hebel bedienen, der das Wasser in einem Abfluss Feld für Feld aus dem Gang abfließen lässt.
			  Ist der Abfluss jedoch zu lange offen, ohne das Wasser abfließt, kommen Schlangen oder andere
			  Kreaturen aus dem Abfluss und können den Spieler attackieren...

		- ObjectHandler
		- Lebensanzeige + Variable mit Leben des Spielers einführen
		- Button zum Auslösen der Fallen (teilweise fertig)
	 - Gegner:
		- Abstrakte Gegnerklasse
		- move, Kollision, Schaden(, Verteidigung), Leben  als Methoden/Variablen
		- verschiedene Typen von Gegnern (verschieden starke/schnelle/verteidigende Gegner, manche in Gruppen mit schwacheren Werten etc., eventuell Fernkämpfer)
		- EnemyHandler
		- Lebensbalken über den Gegnern
		- Auslösen der KI der Gegner, dass sie erst auf einen zurennen, wenn man sie sieht.
	- Bewegliche Mauern:
		- Klasse Moveable_Wall
		- Move-Methode, Status/Positions-Abspeicherung, Auslöser-Methode (Kollision) für Bewegen der Mauern
		- Klasse Button zum Auslösen der Bewegung
	- Inventar
		
Texturen:
	- Texturen für Objekte, Leben, Auslöser (relativ unauffällig, aber zu erkennen) etc.
 	- Texturen (jede Menge) für verschiedene Gegner, Animationen, Schläge, Tod etc.
	- Texturen für die Bewegung der Mauern(Mauern in Standposition die gleichen wie normale Mauern?) und für den Auslöser?(entweder gleiche Textur wie Boden oder minimal anders, also unauffällig)
	- Spielmenü zum Wechseln in die Steuerungsübersicht/Hauptmenü
	- (Allgemein Menü/Startmenü Re-Disgn? Ideen vorhanden )
	- Sterbeanimation (in alle 4 Richtungen)


°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
				geplanter Content


	- seltene besonders schwere Gegner droppen Gegenstände 	wie Heiltrank, Geschwindigkeitsbuff, zeitliche 	Unsterblichkeit, zeitlichen Schutzschild
	oder Ähnliches, die man in einem Inventar mit sich führen kann und dann benutzen kann.
	- HighScore mit der schnellsten Zeit?
	- Rätsel: a la Steine verschieben, Schalter(Klänge) in 	richtiger Reihenfolge, Kombinatorische Knobeleien (minigames)
	- InGame-Menü mit 2. Controlmenü, Möglichkeit zum Hauptmenü zurückzukehren und Abbrechen - Spiel ist in der Zeit pausiert (if-Abfrage in der Update, wenn eines der Fenster offen ist, wird nicht geupdated)
	- Txt-Datei, die die Handlung erklärt oder später mit kleinem Intro-Video (Zeichnungen, mit UNtertiteln unterlegt, in die hinein oder hinausgezoomt wird bzw. die Sicht geht entlang des Bildes)
	- Speicherstände (welche Informationen müssen gespeichert werden? Position, Objecthandler, Level u.Ä.)
	- Gegner: 	
			Gegnertypen:
			- normale Nahkämpfer: etwas langsamer als Spieler, mittlere Gesundheit/Angriffs- und Verteidigungswerte
			- schnelle Nahkämpfer: schneller als Spieler, niedrige Gesundheit, mittlerer Angriff, schwache Verteidigung
			- zahlreiche Nahkämpfer: treten nicht einzeln, sondern in Gruppen auf, gleiche Geschwindigkeit wie Spieler, sehr niedrige Gesundheit und schwache Verteidigung, schwacher Angriff der in
				Kombination, d.h. Anzahl der Gegner aber gefährlich werden kann
			- Fernkämpfer: leicht schneller als Spieler, verbraucht aber Zeit mit stehenbleiben, um zu schießen, ansonsten mittlere Werte
			- Fernkämpfer auf kurzer Distanz: ähnlich wie Fernkämpfer, kann aber nicht soweit schießen, hat aber größeren Schaden und etwas bessere Verteidigung
			- Nahkämpfer mit hoher Verteidigung: wie normale Nahkämpfer, Verteidigung aber erhöht und etwas langsamer
			- Bossgegner: hohe Verteidigung, gleich schnell wie Spieler, leicht erhöhte Angriffswerte, größeres Leben als andere Gegner, (müssen eventuell angegriffen werden, damit sie angreifen)
			einiges später erst: - Buffgegner, die Gegner der Spielers in seiner Nähe buffen kann, d.h. healen/Schaden erhöhen/schneller machen
			
			ordentliche KI für Gegner, beispielsweise in folgender Situation (P-Spieler, E Gegner):



			    |
			    | E
			    |
			P   |

			Sodass der Gegner nicht nach unten rennt oder nach links (also sich schlicht in X oder Y-Richtung auf Spieler zubewegt),
			sondern er erst nach oben geht, und sich dann nach links und unten (also in X- und Y-Richtung auf den Spieler zubewegt)
			bewegt, also Umgebung wahrnimmt bzw. im Wissen der Umgebung handelt


	- Menüupdate
	- schwarzer Bildschirm (Gift)

